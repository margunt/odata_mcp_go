name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Run tests
      run: |
        go test -v ./...
        go test -race -v ./...

    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted:"
          gofmt -d .
          exit 1
        fi

    - name: Run vet
      run: go vet ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for version

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Build all platforms
      run: make build-all

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: build/
        retention-days: 7

  build-matrix:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Build
      run: make build

    - name: Test binary
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ./odata-mcp.exe --version
        else
          ./odata-mcp --version
        fi
      shell: bash